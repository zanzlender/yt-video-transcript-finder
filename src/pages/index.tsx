import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import {
  ArrowDownTrayIcon,
  ArrowUturnLeftIcon,
  CircleStackIcon,
  ExclamationTriangleIcon,
  MagnifyingGlassIcon,
} from "@heroicons/react/24/outline";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const downloadT = api.example.downloadVideoTranscript.useMutation();

  return (
    <>
      <Head>
        <title>YT Videofinder</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#0f0024] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="bg-gradient-to-r from-[#ce3f3f] via-yellow-400 to-pink-500 bg-clip-text text-5xl font-extrabold tracking-tight sm:text-[5rem] ">
            <span className="text-transparent">YouTube</span>{" "}
            <span className="text-transparent">video finder</span>
          </h1>
          <section className="text-white">
            <div className="mx-auto max-w-screen-xl px-4 py-8 sm:py-12 sm:px-6 lg:py-16 lg:px-8">
              <div className="mx-auto max-w-2xl text-center">
                <h2 className="text-3xl font-bold underline decoration-pink-500 decoration-wavy sm:text-4xl">
                  What is this?
                </h2>

                <p className="mt-4 text-gray-300">
                  Did you ever want to find the video you were watching where
                  you remember what they talked about but don&apos;t know what
                  it is?{" "}
                  <strong className="underline decoration-purple-500 underline-offset-2">
                    Well I have.
                  </strong>{" "}
                </p>
                <p className="mt-4 text-gray-300">
                  Which is why YTF&apos;s idea is simple. Find videos on YT
                  based on keywords of the content (transcript) of the video.
                </p>
              </div>

              <div className="mt-8 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
                <FeatureCard
                  title="Download transcripts"
                  text="You can download transcripts of YT videos from their url's
                  by using your own Youtube API keys."
                  Icon={
                    <ArrowDownTrayIcon className="h-9 w-9 stroke-pink-500 stroke-2" />
                  }
                />

                <FeatureCard
                  title="Storage"
                  text="All the transcripts you download are stored inside a local
                    file in /src/content/transcriptions.json"
                  Icon={
                    <CircleStackIcon className="h-9 w-9 stroke-pink-500 stroke-2" />
                  }
                />

                <FeatureCard
                  title="DB backup"
                  text="The transcripts and the url's are also saved in a local
                  SQLite database just in case. And if both get deleted just download again ðŸ‘Œ"
                  Icon={
                    <ArrowUturnLeftIcon className="h-9 w-9 stroke-pink-500 stroke-2" />
                  }
                />

                <FeatureCard
                  title="Search"
                  text="YTF uses Meilisearch under the hood to search through all
                  the transcripts and using content awareness hopefully finds which
                  video you are looking for."
                  Icon={
                    <MagnifyingGlassIcon className="h-9 w-9 stroke-pink-500 stroke-2" />
                  }
                />

                <FeatureCard
                  title="API limit warning"
                  text="Each transcript download costs 200 YT API points! The daily free limit is 10.000 points so use with care! Websites like DownSub or Savesubs do this for free but let's not spam them too much."
                  Icon={
                    <ExclamationTriangleIcon className="h-9 w-9 stroke-pink-500 stroke-2" />
                  }
                />
              </div>

              <div
                onClick={() => {
                  downloadT.mutate({
                    url: "https://www.youtube.com/watch?v=gg31JTZmFUw",
                  });
                }}
                className="mt-12 text-center"
              >
                <div className="inline-block rounded bg-pink-600 px-12 py-3 text-sm font-medium text-white transition hover:bg-pink-700 focus:outline-none focus:ring focus:ring-yellow-400">
                  Get Started Today
                </div>
              </div>
            </div>
          </section>
        </div>

        <div className="flex flex-col items-center gap-2">
          <p className="text-2xl text-white">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>
          <AuthShowcase />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {data && <span> - {data}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

type FeatureCardProps = {
  title: string;
  text: string;
  Icon: React.ReactNode;
};
const FeatureCard = ({ title, text, Icon }: FeatureCardProps) => {
  return (
    <div className="block rounded-xl border border-gray-800 p-8 shadow-xl transition hover:border-pink-500/10 hover:shadow-pink-500/10">
      {Icon}

      <h2 className="mt-4 text-xl font-bold text-white">{title}</h2>

      <p className="mt-1 text-sm text-gray-300">{text}</p>
    </div>
  );
};
